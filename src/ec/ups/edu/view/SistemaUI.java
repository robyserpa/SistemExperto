package ec.ups.edu.view;

import ec.ups.edu.controller.ConexionClips;
import javax.swing.JOptionPane;

/**
 * Sistema Experto
 * @author Roberto Serpa
 */
public class SistemaUI extends javax.swing.JFrame {
    
    private ConexionClips clip;
    int state = 0;
    boolean salida = false;
    
    String type_device ;
    String screen;
    String resolution;
    int fps;
    int ram;
    int rom;
    String microsd;
    int battery;
    int charge_lvl;
    String wireless_charge;
    String nfc;
    String fingerprint;
    String facial;
    String camera_quality;
    String video_camera;
    String waterproof;
    String sound;
    String connective;
    double size;
    double weight;

    /**
     * Creates new form SistemaUI
     */
    public SistemaUI() {
        initComponents();
        extras(false);
        clip = new ConexionClips();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelEval = new javax.swing.JPanel();
        screenTXT = new javax.swing.JLabel();
        resolutionTXT = new javax.swing.JLabel();
        EvaluarR1 = new javax.swing.JButton();
        titulo = new javax.swing.JLabel();
        fpsTXT = new javax.swing.JLabel();
        processorTXT = new javax.swing.JLabel();
        processorCB = new javax.swing.JComboBox<>();
        ramTXT = new javax.swing.JLabel();
        ramCB = new javax.swing.JComboBox<>();
        romCB = new javax.swing.JComboBox<>();
        romTXT = new javax.swing.JLabel();
        microSDTXT = new javax.swing.JLabel();
        micriSDCB = new javax.swing.JComboBox<>();
        batteryTXT = new javax.swing.JLabel();
        batteryCB = new javax.swing.JComboBox<>();
        charge_lvlTXT = new javax.swing.JLabel();
        charge_lvlCB = new javax.swing.JComboBox<>();
        nfcTXT = new javax.swing.JLabel();
        nfcCB = new javax.swing.JComboBox<>();
        fingerprintTXT = new javax.swing.JLabel();
        fingerprintCB = new javax.swing.JComboBox<>();
        facialTXT = new javax.swing.JLabel();
        facialCB = new javax.swing.JComboBox<>();
        cameraTXT = new javax.swing.JLabel();
        cameraCB = new javax.swing.JComboBox<>();
        videoTXT = new javax.swing.JLabel();
        videoCB = new javax.swing.JComboBox<>();
        waterproofTXT = new javax.swing.JLabel();
        waterproofCB = new javax.swing.JComboBox<>();
        soundTXT = new javax.swing.JLabel();
        soundCB = new javax.swing.JComboBox<>();
        connectiviTXT = new javax.swing.JLabel();
        connectiveCB = new javax.swing.JComboBox<>();
        sizeTXT = new javax.swing.JLabel();
        sizeCB = new javax.swing.JComboBox<>();
        weightTXT = new javax.swing.JLabel();
        weightCB = new javax.swing.JComboBox<>();
        resolutionCB = new javax.swing.JComboBox<>();
        screenCB = new javax.swing.JComboBox<>();
        fpsCB = new javax.swing.JComboBox<>();
        wireless_chargeTXT = new javax.swing.JLabel();
        wireless_chargeCB = new javax.swing.JComboBox<>();
        jpResults = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        informationTA = new javax.swing.JTextArea();
        betterJB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Experto");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanelEval.setBackground(new java.awt.Color(204, 255, 204));
        jPanelEval.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        screenTXT.setText("Escoja la tecnologia de la pantalla.");

        resolutionTXT.setText("Escoja la resolución de la pantalla.");

        EvaluarR1.setText("Evaluar");
        EvaluarR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvaluarR1ActionPerformed(evt);
            }
        });

        titulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titulo.setText("Mejor SMARTPHONE");

        fpsTXT.setText("Frecuecia de refresco de la pantalla en Hz.");

        processorTXT.setText("Escoja el tipo de procesador.");

        processorCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gama Premium", "Gama Alta", "Gama Media", "Gama Baja" }));
        processorCB.setSelectedIndex(2);
        processorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processorCBActionPerformed(evt);
            }
        });

        ramTXT.setText("Escoja la RAM del dispositivo en GB.");

        ramCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "16", "12", "8", "6", "4", "2" }));
        ramCB.setSelectedIndex(4);
        ramCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ramCBActionPerformed(evt);
            }
        });

        romCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "512", "256", "128", "64", "32", "16", "8" }));
        romCB.setSelectedIndex(4);
        romCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                romCBActionPerformed(evt);
            }
        });

        romTXT.setText("Escoja el almacenamiento del dispositivo en GB.");

        microSDTXT.setText("¿Quiére una expansión de almacenamiento micro SD?");

        micriSDCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No es importante" }));
        micriSDCB.setSelectedIndex(1);
        micriSDCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micriSDCBActionPerformed(evt);
            }
        });

        batteryTXT.setText("Escoja el rendimiento de la bateria.");

        batteryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No es importante", "Excelente", "Normal" }));
        batteryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batteryCBActionPerformed(evt);
            }
        });

        charge_lvlTXT.setText("Escoja el tipo de carga para la bateria.");

        charge_lvlCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rápida", "Normal", "Lenta" }));
        charge_lvlCB.setSelectedIndex(1);
        charge_lvlCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charge_lvlCBActionPerformed(evt);
            }
        });

        nfcTXT.setText("¿Quiére que su dispositivo cuente con NFC?");

        nfcCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));
        nfcCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfcCBActionPerformed(evt);
            }
        });

        fingerprintTXT.setText("¿Quiére un lector de huella en pantalla?");

        fingerprintCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));
        fingerprintCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fingerprintCBActionPerformed(evt);
            }
        });

        facialTXT.setText("¿Quiére el reconocimiento facial?");

        facialCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));
        facialCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facialCBActionPerformed(evt);
            }
        });

        cameraTXT.setText("Escoja la calidad de la camara de fotografia general.");

        cameraCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Excelente", "Normal", "Baja" }));
        cameraCB.setSelectedIndex(1);
        cameraCB.setToolTipText("");
        cameraCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cameraCBActionPerformed(evt);
            }
        });

        videoTXT.setText("Escoja la resolucón de video de la camara.");

        videoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Excelente", "Normal", "Baja" }));
        videoCB.setSelectedIndex(1);
        videoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoCBActionPerformed(evt);
            }
        });

        waterproofTXT.setText("Escoja el tipo de resistencia al agua y polvo.");

        waterproofCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No es importante", "AguaPolvo", "Salpicaduras" }));
        waterproofCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterproofCBActionPerformed(evt);
            }
        });

        soundTXT.setText("Escoja la calidad de sonido.");

        soundCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Excelente", "Normal", "Baja" }));
        soundCB.setSelectedIndex(1);
        soundCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundCBActionPerformed(evt);
            }
        });

        connectiviTXT.setText("Escoja la tecnología de conectividad.");

        connectiveCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5G", "4G" }));
        connectiveCB.setSelectedIndex(1);
        connectiveCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectiveCBActionPerformed(evt);
            }
        });

        sizeTXT.setText("Escoja el tamaño del dispositiivo.");

        sizeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alto", "Normal", "Pequeño" }));
        sizeCB.setSelectedIndex(1);
        sizeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeCBActionPerformed(evt);
            }
        });

        weightTXT.setText("Escoja el peso del dispositivo.");

        weightCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pesado", "Normal", "Liviano" }));
        weightCB.setSelectedIndex(1);
        weightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightCBActionPerformed(evt);
            }
        });

        resolutionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4_2K", "FULLHD", "HD" }));
        resolutionCB.setSelectedIndex(1);
        resolutionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionCBActionPerformed(evt);
            }
        });

        screenCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OLED", "IPS" }));
        screenCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenCBActionPerformed(evt);
            }
        });

        fpsCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "120", "90", "60" }));
        fpsCB.setSelectedIndex(2);
        fpsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpsCBActionPerformed(evt);
            }
        });

        wireless_chargeTXT.setText("¿Quiére que su dispositivo cuente carga Inalámbrica?");

        wireless_chargeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No es importante" }));
        wireless_chargeCB.setSelectedIndex(1);
        wireless_chargeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireless_chargeCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEvalLayout = new javax.swing.GroupLayout(jPanelEval);
        jPanelEval.setLayout(jPanelEvalLayout);
        jPanelEvalLayout.setHorizontalGroup(
            jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEvalLayout.createSequentialGroup()
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                        .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelEvalLayout.createSequentialGroup()
                                            .addComponent(fpsTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(fpsCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelEvalLayout.createSequentialGroup()
                                            .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelEvalLayout.createSequentialGroup()
                                                    .addComponent(screenTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(screenCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelEvalLayout.createSequentialGroup()
                                                    .addComponent(resolutionTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(resolutionCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(0, 0, Short.MAX_VALUE))))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addGap(204, 204, 204)
                                    .addComponent(EvaluarR1))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(ramTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(ramCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(romTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(romCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(microSDTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(micriSDCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(batteryTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(batteryCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(charge_lvlTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(charge_lvlCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanelEvalLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(titulo)
                                        .addComponent(processorTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(processorCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanelEvalLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(nfcTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(nfcCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(fingerprintTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fingerprintCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(facialTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(facialCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(cameraTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cameraCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(videoTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(videoCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(waterproofTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(waterproofCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(soundTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(soundCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(connectiviTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(connectiveCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(sizeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(sizeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                                        .addComponent(weightTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(weightCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelEvalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(wireless_chargeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(wireless_chargeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelEvalLayout.setVerticalGroup(
            jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEvalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processorTXT)
                    .addComponent(processorCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screenTXT)
                    .addComponent(screenCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resolutionTXT)
                    .addComponent(resolutionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fpsTXT)
                    .addComponent(fpsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ramTXT)
                    .addComponent(ramCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(romTXT)
                    .addComponent(romCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(microSDTXT)
                    .addComponent(micriSDCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batteryTXT)
                    .addComponent(batteryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(charge_lvlTXT)
                    .addComponent(charge_lvlCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wireless_chargeTXT)
                    .addComponent(wireless_chargeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nfcTXT)
                    .addComponent(nfcCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fingerprintTXT)
                    .addComponent(fingerprintCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facialTXT)
                    .addComponent(facialCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cameraTXT)
                    .addComponent(cameraCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoTXT)
                    .addComponent(videoCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waterproofTXT)
                    .addComponent(waterproofCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(soundTXT)
                    .addComponent(soundCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectiviTXT)
                    .addComponent(connectiveCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeTXT)
                    .addComponent(sizeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelEvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightTXT)
                    .addComponent(weightCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EvaluarR1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpResults.setBackground(new java.awt.Color(102, 102, 102));
        jpResults.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jpResults.setPreferredSize(new java.awt.Dimension(489, 927));

        informationTA.setEditable(false);
        informationTA.setColumns(20);
        informationTA.setFont(new java.awt.Font("Kristen ITC", 1, 10)); // NOI18N
        informationTA.setRows(5);
        informationTA.setToolTipText("");
        informationTA.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        informationTA.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(informationTA);

        betterJB.setText("Determinar Mejor Precio");
        betterJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betterJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpResultsLayout = new javax.swing.GroupLayout(jpResults);
        jpResults.setLayout(jpResultsLayout);
        jpResultsLayout.setHorizontalGroup(
            jpResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jpResultsLayout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(betterJB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpResultsLayout.setVerticalGroup(
            jpResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(betterJB)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelEval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpResults, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpResults, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
                    .addComponent(jPanelEval, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EvaluarR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluarR1ActionPerformed
        // TODO add your handling code here:
        if (salida) {
            clip.cerrarConexion();
            salida = false;
            evaluar();
        }else{
            evaluar();
        }
        
    }//GEN-LAST:event_EvaluarR1ActionPerformed

    private void processorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processorCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_processorCBActionPerformed

    private void ramCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ramCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ramCBActionPerformed

    private void romCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_romCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_romCBActionPerformed

    private void micriSDCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micriSDCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_micriSDCBActionPerformed

    private void batteryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batteryCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_batteryCBActionPerformed

    private void charge_lvlCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charge_lvlCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_charge_lvlCBActionPerformed

    private void nfcCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nfcCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nfcCBActionPerformed

    private void fingerprintCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fingerprintCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fingerprintCBActionPerformed

    private void facialCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facialCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_facialCBActionPerformed

    private void cameraCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cameraCBActionPerformed

    private void videoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_videoCBActionPerformed

    private void waterproofCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterproofCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waterproofCBActionPerformed

    private void soundCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soundCBActionPerformed

    private void connectiveCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectiveCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_connectiveCBActionPerformed

    private void sizeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeCBActionPerformed

    private void weightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightCBActionPerformed

    private void resolutionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolutionCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resolutionCBActionPerformed

    private void screenCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_screenCBActionPerformed

    private void fpsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpsCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fpsCBActionPerformed

    private void wireless_chargeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wireless_chargeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wireless_chargeCBActionPerformed

    private void betterJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betterJBActionPerformed
        // TODO add your handling code here:
        mejorDispositivo();
    }//GEN-LAST:event_betterJBActionPerformed

    public void evaluar(){
        type_device = processorCB.getSelectedItem().toString();
        
        if ("Gama Premium".equals(processorCB.getSelectedItem().toString())) {
            type_device = "Gama_Alta_Premium";
        }else if ("Gama Alta".equals(processorCB.getSelectedItem().toString())) {
            type_device = "Gama_Alta";
        }else if ("Gama Media".equals(processorCB.getSelectedItem().toString())) {
            type_device = "Gama_Media";
        }else if ("Gama Baja".equals(processorCB.getSelectedItem().toString())) {
            type_device = "Gama_Baja";
        }
        
        screen = screenCB.getSelectedItem().toString();
        resolution = resolutionCB.getSelectedItem().toString();
        fps = Integer.parseInt(fpsCB.getSelectedItem().toString());
        ram = Integer.parseInt(ramCB.getSelectedItem().toString());
        rom = Integer.parseInt(romCB.getSelectedItem().toString());

        if ("No es importante".equals(micriSDCB.getSelectedItem().toString())) {
            microsd = "sd";
        }else {
            microsd = micriSDCB.getSelectedItem().toString();
        }
        
        if ("No es importante".equals(batteryCB.getSelectedItem().toString())) {
            battery = 2500;
        }else if ("Excelente".equals(batteryCB.getSelectedItem().toString())) {
            battery = 4000;
        }else if ("Normal".equals(batteryCB.getSelectedItem().toString())) {
            battery = 3000;
        }
        
        if ("Rápida".equals(charge_lvlCB.getSelectedItem().toString())) {
            charge_lvl = 25;
        }else if ("Normal".equals(charge_lvlCB.getSelectedItem().toString())) {
            charge_lvl = 15;
        }else if ("Lenta".equals(charge_lvlCB.getSelectedItem().toString())) {
            charge_lvl = 8;
        }
        
        if ("No es importante".equals(wireless_chargeCB.getSelectedItem().toString())) {
            wireless_charge = "sd";
        }else {
            wireless_charge = wireless_chargeCB.getSelectedItem().toString();
        }
        
        nfc = nfcCB.getSelectedItem().toString();
        fingerprint = fingerprintCB.getSelectedItem().toString();
        facial = facialCB.getSelectedItem().toString();
        camera_quality = cameraCB.getSelectedItem().toString();
        video_camera = videoCB.getSelectedItem().toString();
        
        if ("No es importante".equals(waterproofCB.getSelectedItem().toString())) {
            waterproof = "sd";
        }else {
            waterproof = waterproofCB.getSelectedItem().toString();
        }
        
        sound = soundCB.getSelectedItem().toString();
        connective = connectiveCB.getSelectedItem().toString();
        
        if ("Alto".equals(sizeCB.getSelectedItem().toString())) {
            size = 16.0;
        }else if ("Normal".equals(sizeCB.getSelectedItem().toString())) {
            size = 15.0;
        }else if ("Pequeño".equals(sizeCB.getSelectedItem().toString())) {
            size = 14.0;
        }
        if ("Pesado".equals(weightCB.getSelectedItem().toString())) {
            weight = 190;
        }else if ("Normal".equals(weightCB.getSelectedItem().toString())) {
            weight = 160;
        }else if ("Liviano".equals(weightCB.getSelectedItem().toString())) {
            weight = 100;
        }
        
//        JOptionPane.showMessageDialog(null,clip.evaluar(type_device, screen, resolution, fps, ram, rom, microsd,
//                battery, charge_lvl, wireless_charge, nfc, fingerprint, facial,
//                camera_quality, video_camera, waterproof, sound, connective,
//                size, weight));
        
        
        
        String result = clip.evaluar(type_device, screen, resolution, fps, ram, rom, microsd,
                battery, charge_lvl, wireless_charge, nfc, fingerprint, facial,
                camera_quality, video_camera, waterproof, sound, connective,
                size, weight);
        if (!"".equals(result)) {
            informationTA.setText(result);
            extras(true);
        }else {
            JOptionPane.showMessageDialog(null,"No se encontro el dispositivo"
                    + " especificado revise todos los parametros");
        }
        salida = true;
    }
    
    public void mejorDispositivo(){
        
        informationTA.setText("");
        String result = clip.extra();
        informationTA.setText(result);
    }
    
    
    
    public void extras(boolean aux){
        if (aux) {
            state++;
            if (state == 1) {
                this.setSize((this.getSize().width+30)*2, this.getSize().height);
                jpResults.setVisible(aux);
            repaint();
            } 
        }else {
            this.setSize(this.getSize().width/2-30, this.getSize().height);
            jpResults.setVisible(aux);
            repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EvaluarR1;
    private javax.swing.JComboBox<String> batteryCB;
    private javax.swing.JLabel batteryTXT;
    private javax.swing.JButton betterJB;
    private javax.swing.JComboBox<String> cameraCB;
    private javax.swing.JLabel cameraTXT;
    private javax.swing.JComboBox<String> charge_lvlCB;
    private javax.swing.JLabel charge_lvlTXT;
    private javax.swing.JComboBox<String> connectiveCB;
    private javax.swing.JLabel connectiviTXT;
    private javax.swing.JComboBox<String> facialCB;
    private javax.swing.JLabel facialTXT;
    private javax.swing.JComboBox<String> fingerprintCB;
    private javax.swing.JLabel fingerprintTXT;
    private javax.swing.JComboBox<String> fpsCB;
    private javax.swing.JLabel fpsTXT;
    private javax.swing.JTextArea informationTA;
    private javax.swing.JPanel jPanelEval;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpResults;
    private javax.swing.JComboBox<String> micriSDCB;
    private javax.swing.JLabel microSDTXT;
    private javax.swing.JComboBox<String> nfcCB;
    private javax.swing.JLabel nfcTXT;
    private javax.swing.JComboBox<String> processorCB;
    private javax.swing.JLabel processorTXT;
    private javax.swing.JComboBox<String> ramCB;
    private javax.swing.JLabel ramTXT;
    private javax.swing.JComboBox<String> resolutionCB;
    private javax.swing.JLabel resolutionTXT;
    private javax.swing.JComboBox<String> romCB;
    private javax.swing.JLabel romTXT;
    private javax.swing.JComboBox<String> screenCB;
    private javax.swing.JLabel screenTXT;
    private javax.swing.JComboBox<String> sizeCB;
    private javax.swing.JLabel sizeTXT;
    private javax.swing.JComboBox<String> soundCB;
    private javax.swing.JLabel soundTXT;
    private javax.swing.JLabel titulo;
    private javax.swing.JComboBox<String> videoCB;
    private javax.swing.JLabel videoTXT;
    private javax.swing.JComboBox<String> waterproofCB;
    private javax.swing.JLabel waterproofTXT;
    private javax.swing.JComboBox<String> weightCB;
    private javax.swing.JLabel weightTXT;
    private javax.swing.JComboBox<String> wireless_chargeCB;
    private javax.swing.JLabel wireless_chargeTXT;
    // End of variables declaration//GEN-END:variables
}
